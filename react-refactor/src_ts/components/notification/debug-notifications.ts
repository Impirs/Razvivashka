// Debug functions for testing notifications
// These functions will be available in the browser console for testing

import { NotificationType } from '../../types/notification';

// Global notification testing function
(window as any).testNotification = (type: NotificationType = 'achievement', title?: string, message?: string) => {
    const defaultTitles = {
        achievement: '–¢–µ—Å—Ç–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!',
        update: '–î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ',
        warning: '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ'
    };
    
    const defaultMessages = {
        achievement: '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ —Ç–µ—Å—Ç–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ.',
        update: '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.',
        warning: '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ.'
    };

    // Get notification context from the app
    const event = new CustomEvent('testNotification', {
        detail: {
            type,
            title: title || defaultTitles[type],
            message: message || defaultMessages[type]
        }
    });
    
    window.dispatchEvent(event);
    console.log(`Test notification sent: ${type} - ${title || defaultTitles[type]}`);
};

// Convenience functions for each notification type
(window as any).testAchievement = (title?: string, message?: string) => {
    const achievementTitle = title || '–ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!';
    const achievementMessage = message || '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –Ω–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ.';
    (window as any).testNotification('achievement', achievementTitle, achievementMessage);
};

// Function to test realistic achievement notifications with time requirements
(window as any).testRealisticAchievement = (gameProps?: string, tier: number = 0, actualTime?: number) => {
    const achievements = {
        '7x6': { title: '–û—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—á–∞–ª–æ', desc: '–ó–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º –ø–æ–ª–µ –¥–ª—è —á–∏—Å–ª–∞ 6 –∑–∞ ', reqs: [60, 90] },
        '7x7': { title: '–°–µ–º—å+–Ø', desc: '–ó–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º –ø–æ–ª–µ –¥–ª—è —á–∏—Å–ª–∞ 7 –∑–∞ ', reqs: [75, 105] },
        '7x8': { title: '–ó–Ω–∞—Ç–æ–∫ –æ—Å–Ω–æ–≤', desc: '–ó–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º –ø–æ–ª–µ –¥–ª—è —á–∏—Å–ª–∞ 8 –∑–∞ ', reqs: [90, 120] },
        '9x8': { title: '–í—ã—Å—à–∞—è –ª–∏–≥–∞', desc: '–ó–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É –Ω–∞ –±–æ–ª—å—à–æ–º –ø–æ–ª–µ –¥–ª—è —á–∏—Å–ª–∞ 8 –∑–∞ ', reqs: [120, 150, 180] }
    };
    
    const props = gameProps || '7x6';
    const achievement = achievements[props as keyof typeof achievements] || achievements['7x6'];
    const tierNames = ['ü•á', 'ü•à', 'ü•â'];
    const tierName = tierNames[tier] || 'üèÜ';
    const requiredTime = achievement.reqs[tier] || achievement.reqs[0];
    const actualTimeUsed = actualTime || (requiredTime - Math.floor(Math.random() * 20)); // Random time better than requirement
    
    let description = achievement.desc + `${requiredTime}—Å ${tierName}`;
    if (actualTimeUsed < requiredTime) {
        description += ` (${actualTimeUsed}—Å!)`;
    }
    
    (window as any).testNotification('achievement', achievement.title, description);
};

(window as any).testUpdate = (title?: string, message?: string) => {
    (window as any).testNotification('update', title, message);
};

(window as any).testWarning = (title?: string, message?: string) => {
    (window as any).testNotification('warning', title, message);
};

// Function to test multiple notifications (queue testing)
(window as any).testNotificationQueue = () => {
    setTimeout(() => (window as any).testAchievement('–ü–µ—Ä–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ', '–≠—Ç–æ –ø–µ—Ä–≤–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ'), 100);
    setTimeout(() => (window as any).testUpdate('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ 1.0.1', '–î–æ—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è'), 200);
    setTimeout(() => (window as any).testWarning('–í–Ω–∏–º–∞–Ω–∏–µ!', '–¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ'), 300);
    setTimeout(() => (window as any).testAchievement('–í—Ç–æ—Ä–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ', '–≠—Ç–æ –≤—Ç–æ—Ä–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ'), 400);
    console.log('Sent 4 test notifications to queue');
};

// Function to test real achievement notifications
(window as any).testRealAchievement = (gameId: string = 'digit', gameProps: string = '7x7') => {
    const tierNames = ['ü•â –ë—Ä–æ–Ω–∑–∞', 'ü•à –°–µ—Ä–µ–±—Ä–æ', 'ü•á –ó–æ–ª–æ—Ç–æ'];
    const randomTier = tierNames[Math.floor(Math.random() * tierNames.length)];
    
    const gameNames = {
        'digit': '–ß–∏—Å–ª–æ–≤–∞—è –∫–æ–º–ø–æ–∑–∏—Ü–∏—è',
        'shulte': '–¢–∞–±–ª–∏—Ü–∞ –®—É–ª—å—Ç–µ'
    };
    
    const gameName = gameNames[gameId as keyof typeof gameNames] || gameId;
    const randomTime = Math.floor(Math.random() * 60) + 30; // 30-90 seconds
    
    (window as any).testAchievement(
        `${randomTier} - ${gameName}`,
        `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø—Ä–æ—à–ª–∏ –∏–≥—Ä—É –∑–∞ ${randomTime} —Å–µ–∫—É–Ω–¥ –∏–ª–∏ –±—ã—Å—Ç—Ä–µ–µ!`
    );
    
    console.log(`Sent real achievement notification: ${randomTier} in ${gameName}`);
};

console.log(`
Notification Debug Functions Available:
- testNotification(type, title?, message?) - Send custom notification
- testAchievement(title?, message?) - Send achievement notification  
- testRealisticAchievement(gameProps?, tier?, actualTime?) - Test realistic achievement with timing
- testUpdate(title?, message?) - Send update notification
- testWarning(title?, message?) - Send warning notification
- testNotificationQueue() - Test multiple notifications
- testRealAchievement(gameId?, gameProps?) - Test realistic achievement

Example usage:
testAchievement("–ú–∞—Å—Ç–µ—Ä –∏–≥—Ä—ã", "–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤—Å–µ —É—Ä–æ–≤–Ω–∏!")
testRealisticAchievement("7x7", 0, 55) - Gold achievement for 7x7 in 55 seconds (req: 75s)
testRealAchievement("digit", "7x7")
testNotificationQueue()
`);

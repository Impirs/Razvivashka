#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–ª–∏–∑–∞—Ö
 * –ú–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ GitHub Action –∏–ª–∏ –∫–∞–∫ CLI –∫–æ–º–∞–Ω–¥–∞
 */

import fs from 'fs'
import path from 'path'
import { ReleaseUpdater } from '../src/utils/releaseUpdater.js'

const RELEASE_JSON_PATH = path.join(process.cwd(), 'public', 'release-info.json')
const INDEX_HTML_PATH = path.join(process.cwd(), 'dist', 'index.html')

async function updateReleaseInfo() {
  console.log('üîÑ Updating release information...')
  
  const updater = new ReleaseUpdater({
    owner: 'Impirs',
    repo: 'Razvivashka',
    updateTarget: 'both'
  })

  try {
    const result = await updater.updateReleaseData()
    
    if (!result.success) {
      console.error('‚ùå Failed to fetch release data:', result.error)
      process.exit(1)
    }

    console.log(`‚úÖ Fetched release data for version: ${result.data.version}`)

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON —Ñ–∞–π–ª
    if (result.data.json) {
      const publicDir = path.dirname(RELEASE_JSON_PATH)
      if (!fs.existsSync(publicDir)) {
        fs.mkdirSync(publicDir, { recursive: true })
      }
      
      fs.writeFileSync(RELEASE_JSON_PATH, result.data.json, 'utf8')
      console.log('üìù Updated release-info.json')
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º HTML –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (result.data.html && fs.existsSync(INDEX_HTML_PATH)) {
      let htmlContent = fs.readFileSync(INDEX_HTML_PATH, 'utf8')
      
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ meta —Ç–µ–≥–∏ —Ä–µ–ª–∏–∑–∞
      htmlContent = htmlContent.replace(
        /<!-- Release Information Meta Tags -->[\s\S]*?<\/script>/g,
        ''
      )
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ meta —Ç–µ–≥–∏ –≤ head
      htmlContent = htmlContent.replace(
        '</head>',
        `${result.data.html}\n</head>`
      )
      
      fs.writeFileSync(INDEX_HTML_PATH, htmlContent, 'utf8')
      console.log('üìù Updated index.html with release meta tags')
    }

    console.log('üéâ Release information updated successfully!')
    
  } catch (error) {
    console.error('‚ùå Error updating release information:', error)
    process.exit(1)
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç –µ—Å–ª–∏ –æ–Ω –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
  updateReleaseInfo()
}

export default updateReleaseInfo
